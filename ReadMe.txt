https://github.com/okovtun/VBU_011_OOP
https://www.youtube.com/watch?v=ZU9V-7zRbWM&list=PLeqyOOqxeiIPh7J3OThwKM89rq7VAHNth&index=1

DBMS:https://www.youtube.com/watch?v=lXdzd56XzTQ&list=PLeqyOOqxeiIOdYfpK5ZCXTqllqZnaJUJr

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////			EXAM				////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

https://www.codewars.com/kata/578b4f9b7c77f535fc00002f
https://www.codewars.com/kata/578df8f3deaed98fcf0001e9

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////		DATA CONTAINERS			////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

Еще раз сделать Бинарное дерево самостоятельно с нуля, залить его в репозитроий "MyBinaryTree", 
и прислать ссылку на этот репозиторий.

TODO:
В класс BinaryTree добавить методы:
??? minValue(???);	DONE
??? maxValue(???);	DONE
??? count(???);		//Возвращает количество элементов дерева	DONE
??? sum(???);		//Возвращает сумму элементов дерева			DONE
??? avg(???);		//Возвращает среднее арифметическое элементов дерева	DONE
??? erase(???);		//Удаляет указанное значение из дерева		
Кроме того, все методы должны вызываться без необходимости передачи в них корня дерева из main(). DONE

Puzzle:https://www.youtube.com/watch?v=-cZWCnFWmNo&list=PLeqyOOqxeiIMGEfDteoklYzplaPhrM2wp&index=33

DONE:
1. Реализовать методы insert и erase;
1. В классе List реализовать ReverseIterator, который позволит выводить список в обратном направлении 
   (от Хвоста до Головы);
2. В классе ForwardList реализовать Iterator;	DONE
3. В ветке templated шаблонизировать класс ForwardList;

Recursion:
1. Написать рекурсивную функцию Factorial(), которая принимает число, и возвращает 
   Факториал этого числа;
2. Написать рекурсивную функцию Power(), которая принимает основание степени, 
   показатель степени, и возвращает степень;

http://unattendedxp.com/articles/wxpcd/unattended.shtml

DONE:
В Solution 'DataContainers' добавить проект 'List' и реализовать в нем двусвязый список;

TODO:
1. В класс ForwardList добавить следующие методы:
	void push_back(???);	DONE
	void pop_front();		DONE
	void pop_back();		DONE
	void insert(???);		DONE
	void erase(???);
2. Написать деструктор;		DONE
3. Написать CopyMethods и MoveMethods;
4. Оптимизировать алгоитмы добавления элемента в методах push_front() и push_back() до одной строки кода;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////	INHERITANCE & POLYMORPHISM	////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

TODO:
1. Реализовать классы:Rectangle и Circle (круг рисуется при помощи функции Ellipse);
2. Добавить в нашу классовую иерархию треугольники;

TODO:
1. Все классы в проекте Academy вынести в отдельные файлы;
2. Все классы в проекте Department (там где надо считать зарплату) тоже вынести в отдельные файлы;
3. Построить иерархию геометрических фигур: Квадрат, Прямоугольник, Круг, Треугольник. Для каждой фигуры 
   нужно вычислить ее площадь и периметр, а так же каждую фигуру нужно нарисовать.
   Создать массив геометрических фигур, вывести на экран свойтва каждой фигуры и нарисовать ее.
   Так же можно сгенерировать фигуры случайным образом, и вывести на экран все их свойства и нарисовать 
   полученные фигуры.
4. Напомнить ОА про вируальный деструктор в начале следующей пары.

DONE:
На организации есть два типа сотрудников - с почасовой и помесячной оплатой.
Необходимо расчитать зарплату для отдела из пяти сотрудников.

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////		C++ BASICS		////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

TODO:
Реализовать класс Matrix, описывающий матрицу.
Обеспечить операции над матрицами + - * /
Написать метод ??? determinant(); который вычисляет определитель матрицы.

DONE:
Реализовать класс String, описывающий строку:
	String str;	//Создает пустую строку размером 80 Байт	DONE
	String str1 = "Hello";	DONE
	cout << str1 << endl;	DONE
	String str2 = "World";	
	cout << str2 << endl;
	String str3 = str1 + str2;	DONE
	cout << str3 << endl;

DONE:
Для класса Fraction перегрузить следующие операторы:
1. Arithmetical operators: +, -, *, /;	DONE
2. Increment/Decrement: ++, --;			DONE
3. Compound assignments: +=, -=, *=, /= (не забываем про повторное использование кода); DONE
4. Fraction A(2,3); cin >> A; cout << A << endl; ******* DONE
5. Comparison oprators: ==, !=, >, <, >=, <=;	DONE
6. Написать метод ... reduce(...), который сокращает дроби;	DONE
7. Проверочный код в TYPE_CONVERSIONS_HOME_WORK должен заработать;

DONE:
1. Выучить теорию!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2. Реализовать класс Fraction, описывающий простую дробь. 
   Реализовать в нем все необходимые методы, корректно и осмысленно назвать переменные в классе.


DONE:
2. Написать метод ??? distance(???), который возвращает расстояние до указанной точки;	 DONE
3. Написать функцию ??? distance(???), которая возвращает расстояние между двумя точками;